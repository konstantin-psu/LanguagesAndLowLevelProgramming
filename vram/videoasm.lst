   1              	
   2              		.equ	ROWS, 		25		# number of rows
   3              		.equ	COLS, 		80		# number of columns
   4              	
   5              		.equ	CHARBYTES,	2		# total #bytes per char
   6              		.equ	ROWBYTES,	COLS*CHARBYTES	# total #bytes per row
   7              		.equ	SCREENBYTES,	ROWS*ROWBYTES	# total #bytes per screen
   8              	
   9              		.equ	SPACE,		32		# blank space
  10              		.equ	NEWLINE,	'\n'		# newline character
  11              	
  12              		.equ	DEFAULT_ATTR, 	0x2e		# PSU Green
  13              	
  14              		.data
  15              	
  16              	        # Reserve space for a video ram frame buffer with
  17              	        # 25 rows; 80 columns; and one code and one attribute
  18              	        # byte per character.
  19              		.globl  video
  20              		.align	4
  21 0000 00000000 	video:	.space	SCREENBYTES
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              	
  23              	        # Some variables to hold the current row, column, and
  24              		# video attribute:
  25              		.align	4
  26 0fa0 00000000 	row:	.long	0		# we will only use the least significant
  27 0fa4 00000000 	col:	.long	0		# bytes of these variables
  28 0fa8 00000000 	attr:	.long	0
  29              	
  30              		.text
  31              	
  32              		# Clear the screen, setting all characters to SPACE
  33              	        # using the DEFAULT_ATTR attribute.
  34              		.globl	cls
  35 0000 55       	cls:	pushl	%ebp
  36 0001 89E5     		    movl	%esp, %ebp
  37              		    # Fill me in!
  38 0003 66B8202E 	        movw $(DEFAULT_ATTR<<8 | SPACE), %ax
  39              	
  40 0007 B9D00700 	        movl $SCREENBYTES/2, %ecx
  40      00
  41 000c BA000000 	        movl $video, %edx           # need $ sign to read address of video
  41      00
  42              	
  43              	1:      
  44 0011 668902   	        movw %ax, (%edx)
  45              	        # movb $' ', (%edx)
  46              	        # movb $DEFAULT_ATTR, 1(%edx)   # same as video+1
  47 0014 83C202   	        addl $2, %edx
  48 0017 49       	        decl %ecx
  49              	
  50 0018 75F7     	        jnz 1b  #search for label 1 backwards
  51              	        # jnz loop  #search for label loop
  52              	
  53              	
  54              	
  55 001a 89EC     		movl	%ebp, %esp
  56 001c 5D       		popl	%ebp
  57 001d C3       		ret
  58              	
  59              		# Set the video attribute for characters output using outc.
  60              		.globl	setAttr
  61 001e 55       	setAttr:pushl	%ebp
  62 001f 89E5     		movl	%esp, %ebp
  63              		# Fill me in!
  64 0021 89EC     		movl	%ebp, %esp
  65 0023 5D       		popl	%ebp
  66 0024 C3       		ret
  67              	
  68              		# Output a single character at the current row and col position
  69              		# on screen, advancing the cursor coordinates and scrolling the
  70              		# screen as appropriate.  Special treatment is provided for
  71              	        # NEWLINE characters, moving the "cursor" to the start of the
  72              		# "next line".
  73              		.globl	outc
  74 0025 55       	outc:	pushl	%ebp
  75 0026 89E5     		movl	%esp, %ebp
  76              		# Fill me in!
  77 0028 89EC     		movl	%ebp, %esp
  78 002a 5D       		popl	%ebp
  79 002b C3       		ret
  80              	
  81              		# Output an unsigned numeric value as a sequence of 8 hex digits.
  82              		.globl	outhex
  83 002c 55       	outhex:	pushl	%ebp
  84 002d 89E5     		movl	%esp, %ebp
  85              		# Fill me in!
  86 002f 89EC     		movl	%ebp, %esp
  87 0031 5D       		popl	%ebp
  88 0032 C3       		ret
  89              	
DEFINED SYMBOLS
          videoasm.s:2      *ABS*:0000000000000019 ROWS
          videoasm.s:3      *ABS*:0000000000000050 COLS
          videoasm.s:5      *ABS*:0000000000000002 CHARBYTES
          videoasm.s:6      *ABS*:00000000000000a0 ROWBYTES
          videoasm.s:7      *ABS*:0000000000000fa0 SCREENBYTES
          videoasm.s:9      *ABS*:0000000000000020 SPACE
          videoasm.s:10     *ABS*:000000000000000a NEWLINE
          videoasm.s:12     *ABS*:000000000000002e DEFAULT_ATTR
          videoasm.s:21     .data:0000000000000000 video
          videoasm.s:26     .data:0000000000000fa0 row
          videoasm.s:27     .data:0000000000000fa4 col
          videoasm.s:28     .data:0000000000000fa8 attr
          videoasm.s:35     .text:0000000000000000 cls
          videoasm.s:61     .text:000000000000001e setAttr
          videoasm.s:74     .text:0000000000000025 outc
          videoasm.s:83     .text:000000000000002c outhex

NO UNDEFINED SYMBOLS
